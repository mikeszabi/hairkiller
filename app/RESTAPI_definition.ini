🔧 REST API Funkciólista
Az alábbi végpontok a funkcionalitás backend oldalát fedik le:

📷 Kamera vezérlés
GET /frame/current
– Aktuális kamera frame visszaadása (pl. Base64 vagy JPEG streamként).

POST /frame/click
– Egy adott képpontra kattintás kezelése (x, y paraméterekkel).

🎯 Detektálás
POST /detection/enable
– Detektálás be-/kikapcsolása.

GET /detection/boxes
– Aktuális detektált dobozok visszaadása.

POST /detection/threshold
– Detektálási küszöb beállítása.

⚙️ Kalibráció
POST /calibration/start
– Kalibrációs folyamat indítása (lézerpont és mover pozíció párosítása).

POST /calibration/store
– Egy lézerpont és a hozzá tartozó mover pozíció elmentése.

POST /calibration/random
– Véletlenszerű mover pozíció beállítása.

POST /calibration/save
– Homográfia számítása és mentése.

GET /calibration/status
– Elmentett párok száma, kalibráció állapota.

🛰️ Mover vezérlés
POST /mover/move
– Mover pozíció beállítása (x, y).

POST /mover/direction
– Elmozdítás adott irányba (up, down, left, right, step).

POST /mover/move_to_click
– Mozgatás utoljára kattintott képpontra.

POST /mover/visit_all
– Minden detektált pont meglátogatása.

POST /mover/visit_all_and_shoot
– Minden detektált pontra lézerlövéssel együtt.

🔦 Lézer vezérlés
POST /laser/pointer
– Lézer pointer be-/kikapcsolása.

POST /laser/intensity
– Lézer intenzitás beállítása.

POST /laser/impulse
– Lézer impulzushossz beállítása.

POST /laser/shoot
– Lézer lövés aktiválása.

POST /vacuum/on
– Vákum szívó bekapcsolása.
POST /vacuum/off
– Vákum szívó kikapcsolása.

🔚 Rendszervezérlés
POST /release
– Kamera és mover leállítása.

POST /shutdown
– Backend alkalmazás leállítása (opcionális).

🧱 Moduláris rendszerterv (Backend)
A kód átszervezése során a következő modulokat javaslom Flask vagy FastAPI alapú REST backend megvalósításához:

1. app.py
FastAPI / Flask alkalmazásindító

Routerek betöltése, CORS, middlewares

2. routes/
camera_routes.py

detection_routes.py

calibration_routes.py

mover_routes.py

laser_routes.py

system_routes.py

3. services/
camera_service.py – kamera kép olvasása, konvertálás

detection_service.py – AI alapú objektumdetektálás

laser_service.py – lézer pointer és lövésvezérlés

mover_service.py – Galvo interfész, pozícióvezérlés

calibration_service.py – pontpárok kezelése, homográfia számítása

homography_utils.py – számítások külön fájlban

4. models/
(opcionális) adatmodellek (pydantic, configok stb.)

5. interfaces/
uvc_interface.py, galvo_interface.py, laser_interface.py – eszközök elérése

🌐 Frontend javaslat
Egy egyszerű webalkalmazás a következőkből állhat:

Vue.js / React alapú SPA

Kamera stream megjelenítés

Detektált pontok overlay-e

Kalibrációs panel (Save, Store, Random Move)

Mover és lézer vezérlő gombok

REST API-hívások axios vagy fetch segítségével